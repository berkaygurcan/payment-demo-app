import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

import packages from "../../services/odevserver/controllers/packages";
const initialState = {
  value: [],
  status: "idle",
  selectedItems: [],
};

export const fetchPackets = createAsyncThunk(
  "packets/fetchPackets",
  async () => {
    const response = await packages.list();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const packetsSlice = createSlice({
  name: "packets",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state, action) => {
      state.selectedItems.push(action.payload);
    },
    remove: (state, action) => {
      const index = state.selectedItems.findIndex(
        (item) => item.id === action.payload.id
      );
      state.selectedItems.splice(index, 1);
    },
    clearSelectedItems:(state) => {
      state.selectedItems = []
    }
  },

  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPackets.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPackets.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      });
  },
});

export const { add, remove, clearSelectedItems} = packetsSlice.actions;
export default packetsSlice.reducer;
